{"ast":null,"code":"// an object representing the set of vulnerabilities in a tree\n\n/* eslint camelcase: \"off\" */\nconst npa = require('npm-package-arg');\n\nconst pickManifest = require('npm-pick-manifest');\n\nconst Vuln = require('./vuln.js');\n\nconst Calculator = require('@npmcli/metavuln-calculator');\n\nconst _getReport = Symbol('getReport');\n\nconst _fixAvailable = Symbol('fixAvailable');\n\nconst _checkTopNode = Symbol('checkTopNode');\n\nconst _init = Symbol('init');\n\nconst _omit = Symbol('omit');\n\nconst procLog = require('proc-log');\n\nconst fetch = require('npm-registry-fetch');\n\nclass AuditReport extends Map {\n  static load(tree, opts) {\n    return new AuditReport(tree, opts).run();\n  }\n\n  get auditReportVersion() {\n    return 2;\n  }\n\n  toJSON() {\n    const obj = {\n      auditReportVersion: this.auditReportVersion,\n      vulnerabilities: {},\n      metadata: {\n        vulnerabilities: {\n          info: 0,\n          low: 0,\n          moderate: 0,\n          high: 0,\n          critical: 0,\n          total: this.size\n        },\n        dependencies: {\n          prod: 0,\n          dev: 0,\n          optional: 0,\n          peer: 0,\n          peerOptional: 0,\n          total: this.tree.inventory.size - 1\n        }\n      }\n    };\n\n    for (const node of this.tree.inventory.values()) {\n      const {\n        dependencies\n      } = obj.metadata;\n      let prod = true;\n\n      for (const type of ['dev', 'optional', 'peer', 'peerOptional']) {\n        if (node[type]) {\n          dependencies[type]++;\n          prod = false;\n        }\n      }\n\n      if (prod) {\n        dependencies.prod++;\n      }\n    } // if it doesn't have any topVulns, then it's fixable with audit fix\n    // for each topVuln, figure out if it's fixable with audit fix --force,\n    // or if we have to just delete the thing, and if the fix --force will\n    // require a semver major update.\n\n\n    const vulnerabilities = [];\n\n    for (const [name, vuln] of this.entries()) {\n      vulnerabilities.push([name, vuln.toJSON()]);\n      obj.metadata.vulnerabilities[vuln.severity]++;\n    }\n\n    obj.vulnerabilities = vulnerabilities.sort(([a], [b]) => a.localeCompare(b, 'en')).reduce((set, [name, vuln]) => {\n      set[name] = vuln;\n      return set;\n    }, {});\n    return obj;\n  }\n\n  constructor(tree, opts = {}) {\n    super();\n    const {\n      omit\n    } = opts;\n    this[_omit] = new Set(omit || []);\n    this.topVulns = new Map();\n    this.calculator = new Calculator(opts);\n    this.error = null;\n    this.options = opts;\n    this.log = opts.log || procLog;\n    this.tree = tree;\n    this.filterSet = opts.filterSet;\n  }\n\n  async run() {\n    this.report = await this[_getReport]();\n    this.log.silly('audit report', this.report);\n\n    if (this.report) {\n      await this[_init]();\n    }\n\n    return this;\n  }\n\n  isVulnerable(node) {\n    const vuln = this.get(node.packageName);\n    return !!(vuln && vuln.isVulnerable(node));\n  }\n\n  async [_init]() {\n    process.emit('time', 'auditReport:init');\n    const promises = [];\n\n    for (const [name, advisories] of Object.entries(this.report)) {\n      for (const advisory of advisories) {\n        promises.push(this.calculator.calculate(name, advisory));\n      }\n    } // now the advisories are calculated with a set of versions\n    // and the packument.  turn them into our style of vuln objects\n    // which also have the affected nodes, and also create entries\n    // for all the metavulns that we find from dependents.\n\n\n    const advisories = new Set(await Promise.all(promises));\n    const seen = new Set();\n\n    for (const advisory of advisories) {\n      const {\n        name,\n        range\n      } = advisory; // don't flag the exact same name/range more than once\n      // adding multiple advisories with the same range is fine, but no\n      // need to search for nodes we already would have added.\n\n      const k = `${name}@${range}`;\n\n      if (seen.has(k)) {\n        continue;\n      }\n\n      seen.add(k);\n      const vuln = this.get(name) || new Vuln({\n        name,\n        advisory\n      });\n\n      if (this.has(name)) {\n        vuln.addAdvisory(advisory);\n      }\n\n      super.set(name, vuln);\n      const p = [];\n\n      for (const node of this.tree.inventory.query('packageName', name)) {\n        if (!shouldAudit(node, this[_omit], this.filterSet)) {\n          continue;\n        } // if not vulnerable by this advisory, keep searching\n\n\n        if (!advisory.testVersion(node.version)) {\n          continue;\n        } // we will have loaded the source already if this is a metavuln\n\n\n        if (advisory.type === 'metavuln') {\n          vuln.addVia(this.get(advisory.dependency));\n        } // already marked this one, no need to do it again\n\n\n        if (vuln.nodes.has(node)) {\n          continue;\n        } // haven't marked this one yet.  get its dependents.\n\n\n        vuln.nodes.add(node);\n\n        for (const {\n          from: dep,\n          spec\n        } of node.edgesIn) {\n          if (dep.isTop && !vuln.topNodes.has(dep)) {\n            this[_checkTopNode](dep, vuln, spec);\n          } else {\n            // calculate a metavuln, if necessary\n            const calc = this.calculator.calculate(dep.packageName, advisory);\n            p.push(calc.then(meta => {\n              if (meta.testVersion(dep.version, spec)) {\n                advisories.add(meta);\n              }\n            }));\n          }\n        }\n      }\n\n      await Promise.all(p); // make sure we actually got something.  if not, remove it\n      // this can happen if you are loading from a lockfile created by\n      // npm v5, since it lists the current version of all deps,\n      // rather than the range that is actually depended upon,\n      // or if using --omit with the older audit endpoint.\n\n      if (this.get(name).nodes.size === 0) {\n        this.delete(name);\n        continue;\n      } // if the vuln is valid, but THIS advisory doesn't apply to any of\n      // the nodes it references, then remove it from the advisory list.\n      // happens when using omit with old audit endpoint.\n\n\n      for (const advisory of vuln.advisories) {\n        const relevant = [...vuln.nodes].some(n => advisory.testVersion(n.version));\n\n        if (!relevant) {\n          vuln.deleteAdvisory(advisory);\n        }\n      }\n    }\n\n    process.emit('timeEnd', 'auditReport:init');\n  }\n\n  [_checkTopNode](topNode, vuln, spec) {\n    vuln.fixAvailable = this[_fixAvailable](topNode, vuln, spec);\n\n    if (vuln.fixAvailable !== true) {\n      // now we know the top node is vulnerable, and cannot be\n      // upgraded out of the bad place without --force.  But, there's\n      // no need to add it to the actual vulns list, because nothing\n      // depends on root.\n      this.topVulns.set(vuln.name, vuln);\n      vuln.topNodes.add(topNode);\n    }\n  } // check whether the top node is vulnerable.\n  // check whether we can get out of the bad place with --force, and if\n  // so, whether that update is SemVer Major\n\n\n  [_fixAvailable](topNode, vuln, spec) {\n    // this will always be set to at least {name, versions:{}}\n    const paku = vuln.packument;\n\n    if (!vuln.testSpec(spec)) {\n      return true;\n    } // similarly, even if we HAVE a packument, but we're looking for it\n    // somewhere other than the registry, and we got something vulnerable,\n    // then we're stuck with it.\n\n\n    const specObj = npa(spec);\n\n    if (!specObj.registry) {\n      return false;\n    }\n\n    if (specObj.subSpec) {\n      spec = specObj.subSpec.rawSpec;\n    } // We don't provide fixes for top nodes other than root, but we\n    // still check to see if the node is fixable with a different version,\n    // and if that is a semver major bump.\n\n\n    try {\n      const {\n        _isSemVerMajor: isSemVerMajor,\n        version,\n        name\n      } = pickManifest(paku, spec, { ...this.options,\n        before: null,\n        avoid: vuln.range,\n        avoidStrict: true\n      });\n      return {\n        name,\n        version,\n        isSemVerMajor\n      };\n    } catch (er) {\n      return false;\n    }\n  }\n\n  set() {\n    throw new Error('do not call AuditReport.set() directly');\n  } // convert a quick-audit into a bulk advisory listing\n\n\n  static auditToBulk(report) {\n    if (!report.advisories) {\n      // tack on the report json where the response body would go\n      throw Object.assign(new Error('Invalid advisory report'), {\n        body: JSON.stringify(report)\n      });\n    }\n\n    const bulk = {};\n    const {\n      advisories\n    } = report;\n\n    for (const advisory of Object.values(advisories)) {\n      const {\n        id,\n        url,\n        title,\n        severity = 'high',\n        vulnerable_versions = '*',\n        module_name: name\n      } = advisory;\n      bulk[name] = bulk[name] || [];\n      bulk[name].push({\n        id,\n        url,\n        title,\n        severity,\n        vulnerable_versions\n      });\n    }\n\n    return bulk;\n  }\n\n  async [_getReport]() {\n    // if we're not auditing, just return false\n    if (this.options.audit === false || this.tree.inventory.size === 1) {\n      return null;\n    }\n\n    process.emit('time', 'auditReport:getReport');\n\n    try {\n      try {\n        // first try the super fast bulk advisory listing\n        const body = prepareBulkData(this.tree, this[_omit], this.filterSet);\n        this.log.silly('audit', 'bulk request', body); // no sense asking if we don't have anything to audit,\n        // we know it'll be empty\n\n        if (!Object.keys(body).length) {\n          return null;\n        }\n\n        const res = await fetch('/-/npm/v1/security/advisories/bulk', { ...this.options,\n          registry: this.options.auditRegistry || this.options.registry,\n          method: 'POST',\n          gzip: true,\n          body\n        });\n        return await res.json();\n      } catch (er) {\n        this.log.silly('audit', 'bulk request failed', String(er.body)); // that failed, try the quick audit endpoint\n\n        const body = prepareData(this.tree, this.options);\n        const res = await fetch('/-/npm/v1/security/audits/quick', { ...this.options,\n          registry: this.options.auditRegistry || this.options.registry,\n          method: 'POST',\n          gzip: true,\n          body\n        });\n        return AuditReport.auditToBulk(await res.json());\n      }\n    } catch (er) {\n      this.log.verbose('audit error', er);\n      this.log.silly('audit error', String(er.body));\n      this.error = er;\n      return null;\n    } finally {\n      process.emit('timeEnd', 'auditReport:getReport');\n    }\n  }\n\n} // return true if we should audit this one\n\n\nconst shouldAudit = (node, omit, filterSet) => !node.version ? false : node.isRoot ? false : filterSet && filterSet.size !== 0 && !filterSet.has(node) ? false : omit.size === 0 ? true : !( // otherwise, just ensure we're not omitting this one\nnode.dev && omit.has('dev') || node.optional && omit.has('optional') || node.devOptional && omit.has('dev') && omit.has('optional') || node.peer && omit.has('peer'));\n\nconst prepareBulkData = (tree, omit, filterSet) => {\n  const payload = {};\n\n  for (const name of tree.inventory.query('packageName')) {\n    const set = new Set();\n\n    for (const node of tree.inventory.query('packageName', name)) {\n      if (!shouldAudit(node, omit, filterSet)) {\n        continue;\n      }\n\n      set.add(node.version);\n    }\n\n    if (set.size) {\n      payload[name] = [...set];\n    }\n  }\n\n  return payload;\n};\n\nconst prepareData = (tree, opts) => {\n  const {\n    npmVersion: npm_version\n  } = opts;\n  const node_version = process.version;\n  const {\n    platform,\n    arch\n  } = process;\n  const {\n    NODE_ENV: node_env\n  } = process.env;\n  const data = tree.meta.commit(); // the legacy audit endpoint doesn't support any kind of pre-filtering\n  // we just have to get the advisories and skip over them in the report\n\n  return {\n    name: data.name,\n    version: data.version,\n    requires: { ...(tree.package.devDependencies || {}),\n      ...(tree.package.peerDependencies || {}),\n      ...(tree.package.optionalDependencies || {}),\n      ...(tree.package.dependencies || {})\n    },\n    dependencies: data.dependencies,\n    metadata: {\n      node_version,\n      npm_version,\n      platform,\n      arch,\n      node_env\n    }\n  };\n};\n\nmodule.exports = AuditReport;","map":{"version":3,"sources":["/home/adalaber/Escritorio/ADALAB/evaluaciones/modulo-3-evaluacion-final-dunayari/node_modules/npm/node_modules/@npmcli/arborist/lib/audit-report.js"],"names":["npa","require","pickManifest","Vuln","Calculator","_getReport","Symbol","_fixAvailable","_checkTopNode","_init","_omit","procLog","fetch","AuditReport","Map","load","tree","opts","run","auditReportVersion","toJSON","obj","vulnerabilities","metadata","info","low","moderate","high","critical","total","size","dependencies","prod","dev","optional","peer","peerOptional","inventory","node","values","type","name","vuln","entries","push","severity","sort","a","b","localeCompare","reduce","set","constructor","omit","Set","topVulns","calculator","error","options","log","filterSet","report","silly","isVulnerable","get","packageName","process","emit","promises","advisories","Object","advisory","calculate","Promise","all","seen","range","k","has","add","addAdvisory","p","query","shouldAudit","testVersion","version","addVia","dependency","nodes","from","dep","spec","edgesIn","isTop","topNodes","calc","then","meta","delete","relevant","some","n","deleteAdvisory","topNode","fixAvailable","paku","packument","testSpec","specObj","registry","subSpec","rawSpec","_isSemVerMajor","isSemVerMajor","before","avoid","avoidStrict","er","Error","auditToBulk","assign","body","JSON","stringify","bulk","id","url","title","vulnerable_versions","module_name","audit","prepareBulkData","keys","length","res","auditRegistry","method","gzip","json","String","prepareData","verbose","isRoot","devOptional","payload","npmVersion","npm_version","node_version","platform","arch","NODE_ENV","node_env","env","data","commit","requires","package","devDependencies","peerDependencies","optionalDependencies","module","exports"],"mappings":"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","sourcesContent":["// an object representing the set of vulnerabilities in a tree\n/* eslint camelcase: \"off\" */\n\nconst npa = require('npm-package-arg')\nconst pickManifest = require('npm-pick-manifest')\n\nconst Vuln = require('./vuln.js')\nconst Calculator = require('@npmcli/metavuln-calculator')\n\nconst _getReport = Symbol('getReport')\nconst _fixAvailable = Symbol('fixAvailable')\nconst _checkTopNode = Symbol('checkTopNode')\nconst _init = Symbol('init')\nconst _omit = Symbol('omit')\nconst procLog = require('proc-log')\n\nconst fetch = require('npm-registry-fetch')\n\nclass AuditReport extends Map {\n  static load (tree, opts) {\n    return new AuditReport(tree, opts).run()\n  }\n\n  get auditReportVersion () {\n    return 2\n  }\n\n  toJSON () {\n    const obj = {\n      auditReportVersion: this.auditReportVersion,\n      vulnerabilities: {},\n      metadata: {\n        vulnerabilities: {\n          info: 0,\n          low: 0,\n          moderate: 0,\n          high: 0,\n          critical: 0,\n          total: this.size,\n        },\n        dependencies: {\n          prod: 0,\n          dev: 0,\n          optional: 0,\n          peer: 0,\n          peerOptional: 0,\n          total: this.tree.inventory.size - 1,\n        },\n      },\n    }\n\n    for (const node of this.tree.inventory.values()) {\n      const { dependencies } = obj.metadata\n      let prod = true\n      for (const type of [\n        'dev',\n        'optional',\n        'peer',\n        'peerOptional',\n      ]) {\n        if (node[type]) {\n          dependencies[type]++\n          prod = false\n        }\n      }\n      if (prod) {\n        dependencies.prod++\n      }\n    }\n\n    // if it doesn't have any topVulns, then it's fixable with audit fix\n    // for each topVuln, figure out if it's fixable with audit fix --force,\n    // or if we have to just delete the thing, and if the fix --force will\n    // require a semver major update.\n    const vulnerabilities = []\n    for (const [name, vuln] of this.entries()) {\n      vulnerabilities.push([name, vuln.toJSON()])\n      obj.metadata.vulnerabilities[vuln.severity]++\n    }\n\n    obj.vulnerabilities = vulnerabilities\n      .sort(([a], [b]) => a.localeCompare(b, 'en'))\n      .reduce((set, [name, vuln]) => {\n        set[name] = vuln\n        return set\n      }, {})\n\n    return obj\n  }\n\n  constructor (tree, opts = {}) {\n    super()\n    const { omit } = opts\n    this[_omit] = new Set(omit || [])\n    this.topVulns = new Map()\n\n    this.calculator = new Calculator(opts)\n    this.error = null\n    this.options = opts\n    this.log = opts.log || procLog\n    this.tree = tree\n    this.filterSet = opts.filterSet\n  }\n\n  async run () {\n    this.report = await this[_getReport]()\n    this.log.silly('audit report', this.report)\n    if (this.report) {\n      await this[_init]()\n    }\n    return this\n  }\n\n  isVulnerable (node) {\n    const vuln = this.get(node.packageName)\n    return !!(vuln && vuln.isVulnerable(node))\n  }\n\n  async [_init] () {\n    process.emit('time', 'auditReport:init')\n\n    const promises = []\n    for (const [name, advisories] of Object.entries(this.report)) {\n      for (const advisory of advisories) {\n        promises.push(this.calculator.calculate(name, advisory))\n      }\n    }\n\n    // now the advisories are calculated with a set of versions\n    // and the packument.  turn them into our style of vuln objects\n    // which also have the affected nodes, and also create entries\n    // for all the metavulns that we find from dependents.\n    const advisories = new Set(await Promise.all(promises))\n    const seen = new Set()\n    for (const advisory of advisories) {\n      const { name, range } = advisory\n\n      // don't flag the exact same name/range more than once\n      // adding multiple advisories with the same range is fine, but no\n      // need to search for nodes we already would have added.\n      const k = `${name}@${range}`\n      if (seen.has(k)) {\n        continue\n      }\n\n      seen.add(k)\n\n      const vuln = this.get(name) || new Vuln({ name, advisory })\n      if (this.has(name)) {\n        vuln.addAdvisory(advisory)\n      }\n      super.set(name, vuln)\n\n      const p = []\n      for (const node of this.tree.inventory.query('packageName', name)) {\n        if (!shouldAudit(node, this[_omit], this.filterSet)) {\n          continue\n        }\n\n        // if not vulnerable by this advisory, keep searching\n        if (!advisory.testVersion(node.version)) {\n          continue\n        }\n\n        // we will have loaded the source already if this is a metavuln\n        if (advisory.type === 'metavuln') {\n          vuln.addVia(this.get(advisory.dependency))\n        }\n\n        // already marked this one, no need to do it again\n        if (vuln.nodes.has(node)) {\n          continue\n        }\n\n        // haven't marked this one yet.  get its dependents.\n        vuln.nodes.add(node)\n        for (const { from: dep, spec } of node.edgesIn) {\n          if (dep.isTop && !vuln.topNodes.has(dep)) {\n            this[_checkTopNode](dep, vuln, spec)\n          } else {\n            // calculate a metavuln, if necessary\n            const calc = this.calculator.calculate(dep.packageName, advisory)\n            p.push(calc.then(meta => {\n              if (meta.testVersion(dep.version, spec)) {\n                advisories.add(meta)\n              }\n            }))\n          }\n        }\n      }\n      await Promise.all(p)\n\n      // make sure we actually got something.  if not, remove it\n      // this can happen if you are loading from a lockfile created by\n      // npm v5, since it lists the current version of all deps,\n      // rather than the range that is actually depended upon,\n      // or if using --omit with the older audit endpoint.\n      if (this.get(name).nodes.size === 0) {\n        this.delete(name)\n        continue\n      }\n\n      // if the vuln is valid, but THIS advisory doesn't apply to any of\n      // the nodes it references, then remove it from the advisory list.\n      // happens when using omit with old audit endpoint.\n      for (const advisory of vuln.advisories) {\n        const relevant = [...vuln.nodes]\n          .some(n => advisory.testVersion(n.version))\n        if (!relevant) {\n          vuln.deleteAdvisory(advisory)\n        }\n      }\n    }\n    process.emit('timeEnd', 'auditReport:init')\n  }\n\n  [_checkTopNode] (topNode, vuln, spec) {\n    vuln.fixAvailable = this[_fixAvailable](topNode, vuln, spec)\n\n    if (vuln.fixAvailable !== true) {\n      // now we know the top node is vulnerable, and cannot be\n      // upgraded out of the bad place without --force.  But, there's\n      // no need to add it to the actual vulns list, because nothing\n      // depends on root.\n      this.topVulns.set(vuln.name, vuln)\n      vuln.topNodes.add(topNode)\n    }\n  }\n\n  // check whether the top node is vulnerable.\n  // check whether we can get out of the bad place with --force, and if\n  // so, whether that update is SemVer Major\n  [_fixAvailable] (topNode, vuln, spec) {\n    // this will always be set to at least {name, versions:{}}\n    const paku = vuln.packument\n\n    if (!vuln.testSpec(spec)) {\n      return true\n    }\n\n    // similarly, even if we HAVE a packument, but we're looking for it\n    // somewhere other than the registry, and we got something vulnerable,\n    // then we're stuck with it.\n    const specObj = npa(spec)\n    if (!specObj.registry) {\n      return false\n    }\n\n    if (specObj.subSpec) {\n      spec = specObj.subSpec.rawSpec\n    }\n\n    // We don't provide fixes for top nodes other than root, but we\n    // still check to see if the node is fixable with a different version,\n    // and if that is a semver major bump.\n    try {\n      const {\n        _isSemVerMajor: isSemVerMajor,\n        version,\n        name,\n      } = pickManifest(paku, spec, {\n        ...this.options,\n        before: null,\n        avoid: vuln.range,\n        avoidStrict: true,\n      })\n      return {name, version, isSemVerMajor}\n    } catch (er) {\n      return false\n    }\n  }\n\n  set () {\n    throw new Error('do not call AuditReport.set() directly')\n  }\n\n  // convert a quick-audit into a bulk advisory listing\n  static auditToBulk (report) {\n    if (!report.advisories) {\n      // tack on the report json where the response body would go\n      throw Object.assign(new Error('Invalid advisory report'), {\n        body: JSON.stringify(report),\n      })\n    }\n\n    const bulk = {}\n    const {advisories} = report\n    for (const advisory of Object.values(advisories)) {\n      const {\n        id,\n        url,\n        title,\n        severity = 'high',\n        vulnerable_versions = '*',\n        module_name: name,\n      } = advisory\n      bulk[name] = bulk[name] || []\n      bulk[name].push({id, url, title, severity, vulnerable_versions})\n    }\n\n    return bulk\n  }\n\n  async [_getReport] () {\n    // if we're not auditing, just return false\n    if (this.options.audit === false || this.tree.inventory.size === 1) {\n      return null\n    }\n\n    process.emit('time', 'auditReport:getReport')\n    try {\n      try {\n        // first try the super fast bulk advisory listing\n        const body = prepareBulkData(this.tree, this[_omit], this.filterSet)\n        this.log.silly('audit', 'bulk request', body)\n\n        // no sense asking if we don't have anything to audit,\n        // we know it'll be empty\n        if (!Object.keys(body).length) {\n          return null\n        }\n\n        const res = await fetch('/-/npm/v1/security/advisories/bulk', {\n          ...this.options,\n          registry: this.options.auditRegistry || this.options.registry,\n          method: 'POST',\n          gzip: true,\n          body,\n        })\n\n        return await res.json()\n      } catch (er) {\n        this.log.silly('audit', 'bulk request failed', String(er.body))\n        // that failed, try the quick audit endpoint\n        const body = prepareData(this.tree, this.options)\n        const res = await fetch('/-/npm/v1/security/audits/quick', {\n          ...this.options,\n          registry: this.options.auditRegistry || this.options.registry,\n          method: 'POST',\n          gzip: true,\n          body,\n        })\n        return AuditReport.auditToBulk(await res.json())\n      }\n    } catch (er) {\n      this.log.verbose('audit error', er)\n      this.log.silly('audit error', String(er.body))\n      this.error = er\n      return null\n    } finally {\n      process.emit('timeEnd', 'auditReport:getReport')\n    }\n  }\n}\n\n// return true if we should audit this one\nconst shouldAudit = (node, omit, filterSet) =>\n  !node.version ? false\n  : node.isRoot ? false\n  : filterSet && filterSet.size !== 0 && !filterSet.has(node) ? false\n  : omit.size === 0 ? true\n  : !( // otherwise, just ensure we're not omitting this one\n    node.dev && omit.has('dev') ||\n    node.optional && omit.has('optional') ||\n    node.devOptional && omit.has('dev') && omit.has('optional') ||\n    node.peer && omit.has('peer')\n  )\n\nconst prepareBulkData = (tree, omit, filterSet) => {\n  const payload = {}\n  for (const name of tree.inventory.query('packageName')) {\n    const set = new Set()\n    for (const node of tree.inventory.query('packageName', name)) {\n      if (!shouldAudit(node, omit, filterSet)) {\n        continue\n      }\n\n      set.add(node.version)\n    }\n    if (set.size) {\n      payload[name] = [...set]\n    }\n  }\n  return payload\n}\n\nconst prepareData = (tree, opts) => {\n  const { npmVersion: npm_version } = opts\n  const node_version = process.version\n  const { platform, arch } = process\n  const { NODE_ENV: node_env } = process.env\n  const data = tree.meta.commit()\n  // the legacy audit endpoint doesn't support any kind of pre-filtering\n  // we just have to get the advisories and skip over them in the report\n  return {\n    name: data.name,\n    version: data.version,\n    requires: {\n      ...(tree.package.devDependencies || {}),\n      ...(tree.package.peerDependencies || {}),\n      ...(tree.package.optionalDependencies || {}),\n      ...(tree.package.dependencies || {}),\n    },\n    dependencies: data.dependencies,\n    metadata: {\n      node_version,\n      npm_version,\n      platform,\n      arch,\n      node_env,\n    },\n  }\n}\n\nmodule.exports = AuditReport\n"]},"metadata":{},"sourceType":"script"}