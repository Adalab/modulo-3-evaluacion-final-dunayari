{"ast":null,"code":"const tar = require('tar');\n\nconst ssri = require('ssri');\n\nconst npmlog = require('npmlog');\n\nconst formatBytes = require('./format-bytes.js');\n\nconst columnify = require('columnify');\n\nconst logTar = (tarball, opts = {}) => {\n  const {\n    unicode = false,\n    log = npmlog\n  } = opts;\n  log.notice('');\n  log.notice('', `${unicode ? 'ðŸ“¦ ' : 'package:'} ${tarball.name}@${tarball.version}`);\n  log.notice('=== Tarball Contents ===');\n\n  if (tarball.files.length) {\n    log.notice('', columnify(tarball.files.map(f => {\n      const bytes = formatBytes(f.size, false);\n      return /^node_modules\\//.test(f.path) ? null : {\n        path: f.path,\n        size: `${bytes}`\n      };\n    }).filter(f => f), {\n      include: ['size', 'path'],\n      showHeaders: false\n    }));\n  }\n\n  if (tarball.bundled.length) {\n    log.notice('=== Bundled Dependencies ===');\n    tarball.bundled.forEach(name => log.notice('', name));\n  }\n\n  log.notice('=== Tarball Details ===');\n  log.notice('', columnify([{\n    name: 'name:',\n    value: tarball.name\n  }, {\n    name: 'version:',\n    value: tarball.version\n  }, tarball.filename && {\n    name: 'filename:',\n    value: tarball.filename\n  }, {\n    name: 'package size:',\n    value: formatBytes(tarball.size)\n  }, {\n    name: 'unpacked size:',\n    value: formatBytes(tarball.unpackedSize)\n  }, {\n    name: 'shasum:',\n    value: tarball.shasum\n  }, {\n    name: 'integrity:',\n    value: tarball.integrity.toString().substr(0, 20) + '[...]' + tarball.integrity.toString().substr(80)\n  }, tarball.bundled.length && {\n    name: 'bundled deps:',\n    value: tarball.bundled.length\n  }, tarball.bundled.length && {\n    name: 'bundled files:',\n    value: tarball.entryCount - tarball.files.length\n  }, tarball.bundled.length && {\n    name: 'own files:',\n    value: tarball.files.length\n  }, {\n    name: 'total files:',\n    value: tarball.entryCount\n  }].filter(x => x), {\n    include: ['name', 'value'],\n    showHeaders: false\n  }));\n  log.notice('', '');\n};\n\nconst getContents = async (manifest, tarball) => {\n  const files = [];\n  const bundled = new Set();\n  let totalEntries = 0;\n  let totalEntrySize = 0; // reads contents of tarball\n\n  const stream = tar.t({\n    onentry(entry) {\n      totalEntries++;\n      totalEntrySize += entry.size;\n      const p = entry.path;\n\n      if (p.startsWith('package/node_modules/')) {\n        const name = p.match(/^package\\/node_modules\\/((?:@[^/]+\\/)?[^/]+)/)[1];\n        bundled.add(name);\n      }\n\n      files.push({\n        path: entry.path.replace(/^package\\//, ''),\n        size: entry.size,\n        mode: entry.mode\n      });\n    }\n\n  });\n  stream.end(tarball);\n  const integrity = await ssri.fromData(tarball, {\n    algorithms: ['sha1', 'sha512']\n  });\n\n  const comparator = (a, b) => {\n    return a.path.localeCompare(b.path, 'en', {\n      sensitivity: 'case',\n      numeric: true\n    });\n  };\n\n  const isUpper = str => {\n    const ch = str.charAt(0);\n    return ch === ch.toUpperCase();\n  };\n\n  const uppers = files.filter(file => isUpper(file.path));\n  const others = files.filter(file => !isUpper(file.path));\n  uppers.sort(comparator);\n  others.sort(comparator);\n  const shasum = integrity.sha1[0].hexDigest();\n  return {\n    id: manifest._id || `${manifest.name}@${manifest.version}`,\n    name: manifest.name,\n    version: manifest.version,\n    size: tarball.length,\n    unpackedSize: totalEntrySize,\n    shasum,\n    integrity: ssri.parse(integrity.sha512[0]),\n    filename: `${manifest.name}-${manifest.version}.tgz`,\n    files: uppers.concat(others),\n    entryCount: totalEntries,\n    bundled: Array.from(bundled)\n  };\n};\n\nmodule.exports = {\n  logTar,\n  getContents\n};","map":{"version":3,"sources":["/home/adalaber/Escritorio/ADALAB/evaluaciones/modulo-3-evaluacion-final-dunayari/node_modules/npm/lib/utils/tar.js"],"names":["tar","require","ssri","npmlog","formatBytes","columnify","logTar","tarball","opts","unicode","log","notice","name","version","files","length","map","f","bytes","size","test","path","filter","include","showHeaders","bundled","forEach","value","filename","unpackedSize","shasum","integrity","toString","substr","entryCount","x","getContents","manifest","Set","totalEntries","totalEntrySize","stream","t","onentry","entry","p","startsWith","match","add","push","replace","mode","end","fromData","algorithms","comparator","a","b","localeCompare","sensitivity","numeric","isUpper","str","ch","charAt","toUpperCase","uppers","file","others","sort","sha1","hexDigest","id","_id","parse","sha512","concat","Array","from","module","exports"],"mappings":"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","sourcesContent":["const tar = require('tar')\nconst ssri = require('ssri')\nconst npmlog = require('npmlog')\nconst formatBytes = require('./format-bytes.js')\nconst columnify = require('columnify')\n\nconst logTar = (tarball, opts = {}) => {\n  const { unicode = false, log = npmlog } = opts\n  log.notice('')\n  log.notice('', `${unicode ? 'ðŸ“¦ ' : 'package:'} ${tarball.name}@${tarball.version}`)\n  log.notice('=== Tarball Contents ===')\n  if (tarball.files.length) {\n    log.notice('', columnify(tarball.files.map((f) => {\n      const bytes = formatBytes(f.size, false)\n      return (/^node_modules\\//.test(f.path)) ? null\n        : { path: f.path, size: `${bytes}` }\n    }).filter(f => f), {\n      include: ['size', 'path'],\n      showHeaders: false,\n    }))\n  }\n  if (tarball.bundled.length) {\n    log.notice('=== Bundled Dependencies ===')\n    tarball.bundled.forEach((name) => log.notice('', name))\n  }\n  log.notice('=== Tarball Details ===')\n  log.notice('', columnify([\n    { name: 'name:', value: tarball.name },\n    { name: 'version:', value: tarball.version },\n    tarball.filename && { name: 'filename:', value: tarball.filename },\n    { name: 'package size:', value: formatBytes(tarball.size) },\n    { name: 'unpacked size:', value: formatBytes(tarball.unpackedSize) },\n    { name: 'shasum:', value: tarball.shasum },\n    {\n      name: 'integrity:',\n      value: tarball.integrity.toString().substr(0, 20) + '[...]' + tarball.integrity.toString().substr(80),\n    },\n    tarball.bundled.length && { name: 'bundled deps:', value: tarball.bundled.length },\n    tarball.bundled.length && { name: 'bundled files:', value: tarball.entryCount - tarball.files.length },\n    tarball.bundled.length && { name: 'own files:', value: tarball.files.length },\n    { name: 'total files:', value: tarball.entryCount },\n  ].filter((x) => x), {\n    include: ['name', 'value'],\n    showHeaders: false,\n  }))\n  log.notice('', '')\n}\n\nconst getContents = async (manifest, tarball) => {\n  const files = []\n  const bundled = new Set()\n  let totalEntries = 0\n  let totalEntrySize = 0\n\n  // reads contents of tarball\n  const stream = tar.t({\n    onentry (entry) {\n      totalEntries++\n      totalEntrySize += entry.size\n      const p = entry.path\n      if (p.startsWith('package/node_modules/')) {\n        const name = p.match(/^package\\/node_modules\\/((?:@[^/]+\\/)?[^/]+)/)[1]\n        bundled.add(name)\n      }\n      files.push({\n        path: entry.path.replace(/^package\\//, ''),\n        size: entry.size,\n        mode: entry.mode,\n      })\n    },\n  })\n  stream.end(tarball)\n\n  const integrity = await ssri.fromData(tarball, {\n    algorithms: ['sha1', 'sha512'],\n  })\n\n  const comparator = (a, b) => {\n    return a.path.localeCompare(b.path, 'en', {\n      sensitivity: 'case',\n      numeric: true,\n    })\n  }\n\n  const isUpper = (str) => {\n    const ch = str.charAt(0)\n    return ch === ch.toUpperCase()\n  }\n\n  const uppers = files.filter(file => isUpper(file.path))\n  const others = files.filter(file => !isUpper(file.path))\n\n  uppers.sort(comparator)\n  others.sort(comparator)\n\n  const shasum = integrity.sha1[0].hexDigest()\n  return {\n    id: manifest._id || `${manifest.name}@${manifest.version}`,\n    name: manifest.name,\n    version: manifest.version,\n    size: tarball.length,\n    unpackedSize: totalEntrySize,\n    shasum,\n    integrity: ssri.parse(integrity.sha512[0]),\n    filename: `${manifest.name}-${manifest.version}.tgz`,\n    files: uppers.concat(others),\n    entryCount: totalEntries,\n    bundled: Array.from(bundled),\n  }\n}\n\nmodule.exports = { logTar, getContents }\n"]},"metadata":{},"sourceType":"script"}